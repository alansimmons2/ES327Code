# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(name='MM')
mdb.models['MM'].ConstrainedSketch(name='MatrixSketch', sheetSize=200.0)
mdb.models['MM'].sketches['MatrixSketch'].rectangle(point1=(0.0, 0.0), point2=(
    10.0, 1.0))
mdb.models['MM'].Part(dimensionality=TWO_D_PLANAR, name='MatrixPart', type=
    DEFORMABLE_BODY)
mdb.models['MM'].parts['MatrixPart'].BaseShell(sketch=
    mdb.models['MM'].sketches['MatrixSketch'])
mdb.models['MM'].ConstrainedSketch(name='NPSketch', sheetSize=200.0)
mdb.models['MM'].sketches['NPSketch'].rectangle(point1=(5.0, 0.83), point2=(
    6.6, 0.99))
mdb.models['MM'].sketches['NPSketch'].rectangle(point1=(3.4, 0.57), point2=(
    5.0, 0.73))
mdb.models['MM'].sketches['NPSketch'].rectangle(point1=(5.0, 0.29), point2=(
    6.6, 0.45))
mdb.models['MM'].sketches['NPSketch'].rectangle(point1=(3.4, 0.01), point2=(
    5.0, 0.17))
mdb.models['MM'].Part(dimensionality=TWO_D_PLANAR, name='NPPart', type=
    DEFORMABLE_BODY)
mdb.models['MM'].parts['NPPart'].BaseShell(sketch=
    mdb.models['MM'].sketches['NPSketch'])
mdb.models['MM'].ConstrainedSketch(name='IPSketch', sheetSize=200.0)
mdb.models['MM'].sketches['IPSketch'].rectangle(point1=(4.9, 0.82), point2=(
    6.7, 0.999))
mdb.models['MM'].sketches['IPSketch'].rectangle(point1=(3.3, 0.56), point2=(
    5.1, 0.74))
mdb.models['MM'].sketches['IPSketch'].rectangle(point1=(4.9, 0.28), point2=(
    6.7, 0.46))
mdb.models['MM'].sketches['IPSketch'].rectangle(point1=(3.3, 0.001), point2=(
    5.1, 0.18))
mdb.models['MM'].Part(dimensionality=TWO_D_PLANAR, name='IPPart', type=
    DEFORMABLE_BODY)
mdb.models['MM'].parts['IPPart'].BaseShell(sketch=
    mdb.models['MM'].sketches['IPSketch'])
mdb.models['MM'].Material(name='MatrixMat')
mdb.models['MM'].materials['MatrixMat'].Diffusivity(table=((0.005, 0.0), ))
mdb.models['MM'].materials['MatrixMat'].Solubility(table=((1.0, ), ))
mdb.models['MM'].Material(name='NPMat')
mdb.models['MM'].materials['NPMat'].Diffusivity(table=((0.0, 0.0), ))
mdb.models['MM'].materials['NPMat'].Solubility(table=((1.0, ), ))
mdb.models['MM'].Material(name='IPMat')
mdb.models['MM'].materials['IPMat'].Diffusivity(table=((0.5, 0.0), ))
mdb.models['MM'].materials['IPMat'].Solubility(table=((1.0, ), ))
mdb.models['MM'].HomogeneousSolidSection(material='MatrixMat', name='MatSec', 
    thickness=None)
mdb.models['MM'].parts['MatrixPart'].Set(faces=
    mdb.models['MM'].parts['MatrixPart'].faces.getSequenceFromMask(('[#f ]', ), 
    ), name='Set-1')
mdb.models['MM'].parts['MatrixPart'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['MatrixPart'].sets['Set-1'], sectionName='MatSec')
mdb.models['MM'].HomogeneousSolidSection(material='NPMat', name='NPSec', 
    thickness=None)
mdb.models['MM'].parts['NPPart'].Set(faces=
    mdb.models['MM'].parts['NPPart'].faces.getSequenceFromMask(('[#f]', ), ), 
    name='Set-1')
mdb.models['MM'].parts['NPPart'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NPPart'].sets['Set-1'], sectionName='NPSec')
mdb.models['MM'].HomogeneousSolidSection(material='IPMat', name='IPSec', 
    thickness=None)
mdb.models['MM'].parts['MatrixPart'].Set(faces=
    mdb.models['MM'].parts['MatrixPart'].faces.getSequenceFromMask(('[#f]', ), 
    ), name='Set-1')
mdb.models['MM'].parts['IPPart'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['MatrixPart'].sets['Set-1'], sectionName='IPSec')
mdb.models['MM'].rootAssembly.Instance(dependent=OFF, name='MatrixPart-1', 
    part=mdb.models['MM'].parts['MatrixPart'])
mdb.models['MM'].rootAssembly.Instance(dependent=OFF, name='NPPart-1', part=
    mdb.models['MM'].parts['NPPart'])
mdb.models['MM'].rootAssembly.Instance(dependent=OFF, name='IPPart-1', part=
    mdb.models['MM'].parts['IPPart'])
mdb.models['MM'].rootAssembly.InstanceFromBooleanMerge(domain=GEOMETRY, 
    instances=(mdb.models['MM'].rootAssembly.instances['MatrixPart-1'], 
    mdb.models['MM'].rootAssembly.instances['NPPart-1'], 
    mdb.models['MM'].rootAssembly.instances['IPPart-1']), keepIntersections=ON, 
    name='NCPI', originalInstances=SUPPRESS)
mdb.models['MM'].rootAssembly.makeIndependent(instances=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ))
mdb.models['MM'].parts['NCPI'].Set(faces=
    mdb.models['MM'].parts['NCPI'].faces.getSequenceFromMask(('[#f]', ), ), 
    name='Set-2')
mdb.models['MM'].parts['NCPI'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NCPI'].sets['Set-2'], sectionName='NPSec', 
    thicknessAssignment=FROM_SECTION)
mdb.models['MM'].parts['NCPI'].Set(faces=
    mdb.models['MM'].parts['NCPI'].faces.getSequenceFromMask(('[#2e]', ), ), 
    name='Set-3')
mdb.models['MM'].parts['NCPI'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NCPI'].sets['Set-3'], sectionName='IPSec', 
    thicknessAssignment=FROM_SECTION)
mdb.models['MM'].parts['NCPI'].Set(faces=
    mdb.models['MM'].parts['NCPI'].faces.getSequenceFromMask(('[#1]', ), ), 
    name='Set-4')
mdb.models['MM'].parts['NCPI'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NCPI'].sets['Set-4'], sectionName='MatSec', 
    thicknessAssignment=FROM_SECTION)
mdb.models['MM'].rootAssembly.regenerate()
mdb.models['MM'].MassDiffusionStep(amplitude=RAMP, name='Step-1', previous=
    'Initial', response=STEADY_STATE, timePeriod=1)
mdb.models['MM'].FieldOutputRequest(createStepName='Step-1', name='F-Output-2', 
    variables=('IVOL', ))
mdb.models['MM'].rootAssembly.Set(edges=
    mdb.models['MM'].rootAssembly.instances['NCPI-1'].edges.getSequenceFromMask(
    mask=('[#8 ]', ), ), name='Left_Edge_Set')
mdb.models['MM'].rootAssembly.Set(edges=
    mdb.models['MM'].rootAssembly.instances['NCPI-1'].edges.getSequenceFromMask(
    mask=('[#2 ]', ), ), name='Right_Edge_Set')
mdb.models['MM'].rootAssembly.Set(edges=
    mdb.models['MM'].rootAssembly.instances['NCPI-1'].edges.getSequenceFromMask(
    mask=('[#4 ]', ), ), name='Top_Edge_Set')
mdb.models['MM'].rootAssembly.Set(edges=
    mdb.models['MM'].rootAssembly.instances['NCPI-1'].edges.getSequenceFromMask(
    mask=('[#1 ]', ), ), name='Bottom_Edge_Set')
mdb.models['MM'].ConcentrationBC(createStepName='Step-1', distributionType=
    UNIFORM, magnitude=1.0, name='BC1', region=
    mdb.models['MM'].rootAssembly.sets['Top_Edge_Set'])
mdb.models['MM'].ConcentrationBC(createStepName='Step-1', distributionType=
    UNIFORM, magnitude=0.0, name='BC2', region=
    mdb.models['MM'].rootAssembly.sets['Bottom_Edge_Set'])
mdb.models['MM'].rootAssembly.makeIndependent(instances=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ))
mdb.models['MM'].rootAssembly.makeDependent(instances=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ))
mdb.models['MM'].rootAssembly.makeIndependent(instances=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ))
mdb.models['MM'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ), size=0.5)
mdb.models['MM'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ), size=0.01)
mdb.models['MM'].rootAssembly.seedPartInstance(deviationFactor=0.1, 
    minSizeFactor=0.1, regions=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ), size=0.04)
mdb.models['MM'].rootAssembly.generateMesh(regions=(
    mdb.models['MM'].rootAssembly.instances['NCPI-1'], ))
mdb.models['MM'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=DC2D4, elemLibrary=STANDARD), ), regions=
    mdb.models['MM'].rootAssembly.instances['NCPI-1'].sets['Set-1'])
mdb.models['MM'].parts['NCPI'].Set(faces=
    mdb.models['MM'].parts['NCPI'].faces.getSequenceFromMask(('[#1 ]', ), ), 
    name='Set-5')
mdb.models['MM'].parts['NCPI'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NCPI'].sets['Set-5'], sectionName='MatSec', 
    thicknessAssignment=FROM_SECTION)
mdb.models['MM'].parts['NCPI'].Set(faces=
    mdb.models['MM'].parts['NCPI'].faces.getSequenceFromMask(('[#1e ]', ), ), 
    name='Set-6')
mdb.models['MM'].parts['NCPI'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NCPI'].sets['Set-6'], sectionName='IPSec', 
    thicknessAssignment=FROM_SECTION)
mdb.models['MM'].parts['NCPI'].Set(faces=
    mdb.models['MM'].parts['NCPI'].faces.getSequenceFromMask(('[#1e0 ]', ), ), 
    name='Set-7')
mdb.models['MM'].parts['NCPI'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['MM'].parts['NCPI'].sets['Set-7'], sectionName='NPSec', 
    thicknessAssignment=FROM_SECTION)
# Save by u2123472 on 2024_02_15-22.27.46; build 2023 2022_09_28-19.11.55 183150
