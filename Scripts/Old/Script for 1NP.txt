from abaqus import *
from abaqusConstants import *

# Create a new model
myModel = mdb.Model(name='MM')



#Building Parts from Sketches

# Create Matrix Sketch
mySketch = myModel.ConstrainedSketch(name='MatrixSketch', sheetSize=200.0)
mySketch.rectangle(point1=(0.0, 0.0), point2=(1.0, 1.0))

# Create Matrix Part
myPart = myModel.Part(name='MatrixPart', dimensionality=TWO_D_PLANAR, type=DEFORMABLE_BODY)
myPart.BaseShell(sketch=mySketch)

#Create NP Sketch
mySketch = myModel.ConstrainedSketch(name='NPSketch', sheetSize=200.0)
mySketch.rectangle(point1=(0.2,0.45), point2=(0.8,0.55))

#Create NP Part
mypart = myModel.Part(name='NPPart', dimensionality=TWO_D_PLANAR, type=DEFORMABLE_BODY)
myPart.Baseshell(sketch=mySketch)



#Creating Materials

# Create Material for Matrix
myMaterial = myModel.Material(name='MatrixMat')
myMaterial.Diffusivity(table=((0.005, 0.0),))
myMaterial.Solubility(table=((1.0,),))

#Create Material for NP
myMaterial = myModel.Material(name='NPMat')
myMaterial.Diffusivity(table=((1e-10,0.0),))
myMaterial.Solubility(table=((1.0,),))



# Create a section and assign the material
#mySection = myModel.HomogeneousSolidSection(material='MatrixProps', name='MatrixSection', thickness=None)
#region = myPart.Set(faces=myPart.faces.getSequenceFromMask(('[#1 ]',),), name='Set-1')
#myPart.SectionAssignment(region=region, sectionName='MatrixSection', offset=0.0, offsetType=MIDDLE_SURFACE, offsetField='')

# Create an independent instance for the part
#myAssembly = myModel.rootAssembly
#myInstance = myAssembly.Instance(dependent=OFF, name='MatrixPart-1', part=myPart)

# Create a step for the analysis
#myModel.MassDiffusionStep(amplitude=RAMP, name='Step-1', previous='Initial', response=STEADY_STATE, timePeriod=1)

# Set edges for boundary conditions
#rightEdge = myInstance.edges.findAt(((1.0, 0.5, 0.0),))
#leftEdge = myInstance.edges.findAt(((0.0, 0.5, 0.0),))
#topEdge = myInstance.edges.findAt(((0.5, 1.0, 0.0),))

#leftEdgeSet = myAssembly.Set(edges=leftEdge, name='Left_Edge_Set')
#rightEdgeSet = myAssembly.Set(edges=rightEdge, name='Right_Edge_Set')

# Applying Boundary Conditions
#myModel.ConcentrationBC(name='BC1', createStepName='Step-1', region=leftEdgeSet, distributionType=UNIFORM, magnitude=1.0)
#myModel.ConcentrationBC(name='BC2', createStepName='Step-1', region=rightEdgeSet, distributionType=UNIFORM, magnitude=0.0)


# Seed edges for meshing
#myAssembly.seedEdgeByNumber(edges=leftEdge, number=100, constraint=FIXED)
#myAssembly.seedEdgeByNumber(edges=topEdge, number=100, constraint=FIXED)

# Generate mesh
#myAssembly.generateMesh(regions=(myInstance,))

# Assign Element Type
#import mesh
#region_2D4 = myInstance.sets['Set-1']
#elemType_2D4 = mesh.ElemType(elemCode=DC2D4, elemLibrary=STANDARD)
#myAssembly.setElementType(regions=region_2D4, elemTypes=(elemType_2D4,))

# Create an analysis job for the model and submit it.

#jobName = 'MassDiffusionJob'
#myJob = mdb.Job(name=jobName, model='MM', description='MassDiffusionTest')

# Wait for the job to complete.

#myJob.submit()
#myJob.waitForCompletion()

# Visualisation process
#import visualization
#myViewport = session.Viewport(name='Viewport1')
#myOdb = visualization.openOdb(path=jobName + '.odb')
#myViewport.setValues(displayedObject=myOdb)
#myViewport.odbDisplay.display.setValues(plotState=CONTOURS_ON_DEF)
#myViewport.odbDisplay.commonOptions.setValues(renderStyle=FILLED)